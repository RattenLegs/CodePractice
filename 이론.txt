---------------------------

데이터 입출력 구현

출제기준: 

논리 데이터 저장소 확인

물리 데이터 저장소 설계

데이터 조작 프로시저 작성

데이터 조작 프로시저 최적화



-데이터 설계 순서, 개체와 속성의 정의, 관계형 DB(RDBMS)의 정의와 구성요소, 정규화
-반정규화, 시스템 카탈로그, SQL 
- 데이터 프로시저의 정의와 종류

논리 데이터베이스 설계 챕터

데이터 모델링 순서(상식)
- DB계획
- 요구사항 분석
- 개념적 데이터 설계(현실에 있는 것을 DB의 개념으로 만듬)
- 논리적 데이터 설계(논리적으로 엔티티, 속성 등 설계)
- 물리적 데이터 설계(실제 DB에 있는 물리적 설계)
 
개념적 데이터 모델링: 개체 타입, 속성 등을 명시해서 현실세계 반영
논리 데이터 모델링: 개념적 구조를 정규화, 규칙과 관계를 완성(엔티티, 속성, 관계를 구조적으로 정의)
물리 데이터 모델링: 레코드 양식 순서, 경로 인덱싱, 클러스터링, 해싱(기술, 물리적)

관계형 데이터베이스: 데이터베이스라 불리는 개념으로 엑셀과 비슷한 테이블이라는 형태로 데이터 제공

테이블은 릴레이션이라고도 함(PDF 참조)

튜플은 '쌍'이 튜플이다.(ex: 학번~강의명 값의 쌍)

이상(PDF 참조)

정규화(PDF, 책 참조)

종속(조금 더 공부)

다치 종속(multivalued dependency): 1개 속성에 여러개가 맵핑 되어있을 때
ex) 서로 관련 없는 속성이 매핑됨(홍길동, 수학(수강과목), 사진(동아리): 수학과 사진은 연관 X)
함수적 종속(Functional dependency): 1개를 알면, 다른 것도 알 수 있다.
ex) 고객번호를 알면 주민번호를 알 수 있다.
조인 종속(Join dependency): 여러 테이블을 조합했을 때 결과로서 구성될 수 있다.
ex) 세 개의 테이블을 조합했을 때 원래 테이블로 가져올 수 있음

트랜잭션(PDF)

샤딩: 대규모 DB에서 여러 독립적인 부분으로 분할하여 성능 향상시키는 기술

인덱스: 추가적인 저장 공간을 활용, 테이블의 검색 속도를 향상시키기 위한 자료구조

시스템 카탈로그: DB에 저장되어 있는 데이터 개체들에 대한 정보가 수록되어 있는 시스템

분산 데이터베이스의 목표(PDF)

데이터베이스 회복기법(PDF)

--------------------------------------------------------
서버 프로그램 구현과 인터페이스 구현

서버 프로그램 구현 출제 기준
- 개발환경 구축하기
- 공통 모듈 구현하기
- 서버 프로그램 구현하기
- 배치 프로그램 구현하기

>> 개발 환경에 필요한 것들
서비스 구현에 필요한 공통 모듈 작성
업무 프로그램의 내부 기능, 인터페이스 구현과 테스트

서버의 종류
- 웹 서버(WEB): 웹 상의 정적 콘텐츠를 처리하고, HTTP의 요청과 응답을 처리
- 웹 애플리케이션 서버(WAS): 동적 콘텐츠와 DB와의 연결 등을 처리
- 데이터베이스 서버
- 파일 서버

응집도: 모듈 내부의 코드가 어느 정도 밀접하게 관련되어 있는지
결합도: 모듈 간의 의존도, 연관관계가 강할수록 유지보수가 어려움

순차적 응집도 vs 절차적 응집도
순차적: A라는 모듈의 출력이 다른 모듈의 입력으로 들어감
절차적: 관련 기능이 특정 순서로 실행되는 것

공통 모듈 구현 절차

DTO/VO > SQL > DAO > Service > Controller > View

DTO: Date Transfer Object, 데이터의 전송이나 저장을 위한 객체 설계
VO: read only

SQL: 데이터베이스 접근을 위한 쿼리 작성
DAO: 데이터베이스와의 상호작용을 담당하는 객체 설계
서비스: DAO를 호출하여 데이터 처리 후 DTO/VO를 사용하여 데이터를 주고 받는다.
컨트롤러: Virew와 서비스의 중간 단계의 다리 역학을 한다.(HTTP 요청/응답 등)
View: 사용자(고객)에게 보이는 화면을 구현한다.

DTO 설계 후, 접근을 위해 SQL을 설계(select, insert 등), DB와 실제 서비스의 상호작용을 하는 객체(DAO) 설계
이후 서비스라는 걸 만들어서 DTO나 VO를 가져와서 데이터를 주고받음
비즈니스 로직(메인 로직)은 view와 서비스의 중간 다리의 역할

소프트웨어를 만들었는데 너무 크면 서로 어떻게 연관되었는지 봐야 함
FAN-IN, FAN-OUT

배치(일괄) 프로그램: 정기적으로 반복 수행되거나, 규칙에 의해 일괄적으로 수행되는 것
미들웨어: 서로 다른 소프트웨어 응용 프로그램이나 구성 요소를 연결하는 소프트웨어(JDBD, RabbitMQ, Apache Tomcat 등)

DIP: 고수준 모듈은 저수준 모듈에 의존 X, 추상화된 인터페이스 기준이나 상위 클래스 기준으로 정리

---------------------------------------------------------------

인터페이스는 어떤 식으로 설계할까?

큰 규모의 회사에서 사용하는 방법: EAI(Enterprise Application Integration)
(PDF)

ESB(Enterprise Service Bus)
기업 애플리케이션 통합을 위한 아키텍처 패턴으로, 서비스 지향 아키텍처(SOA)를 지원
다양한 시스템 간의 통신을 효율적으로 관리하고 조정하기 위해 설계된 중간 계통 소프트웨어

-------------------------------------------------------------

인터페이스 관련 용어

1. JSON: 데이터를 저장하고 전송하기 위한 경량의 데이터 교환 방식, 속성-값 쌍으로 이루어짐
2. REST: HTTP 프로토콜을 기반으로 하며, 자원을 URI로 표현하고 CRUD 연산을 HTTP 메서드(GET, POST, PUT, DELETE)로 매핑
3. 직렬화/역직렬화: 직렬화는 객체의 상태를 저장하거나 전송할 수 있는 형식으로 변환하는 과정
역직렬화는 직렬화된 데이터를 원래 객체로 복원하는 과정
4. AJAX: 웹 페이지를 동적으로 갱신할 수 있게 해주는 비동기 기술
5. XML: 데이터를 구조적으로 표현하기 위한 마크업 언어
6. API: 소프트웨어 애플리케이션 간의 상호작용을 정의하는 인터페이스

용어는 한번씩 읽어보자
서버 구현과 인터페이스는 연관하여 외우면 좋음
응집도 결합도는 무조건 암기

---------------------------------------------------------------
화면설계/애플리케이션 테스트

UI유형: CLI, GUI, NUI, OUI

UI 설계원칙: 직관성, 유효성, 학습성, 유효성

UML 다이어그램 종류
- 구조적 다이어그램
클래스 다이어그램: 클래스 간의 관계와 클래스 내의 속성 보여줌
객체 다이어그램: 객체와 객체 사이 관계 표현
커뮤니케이션 다이어그램: 객체들이 주고받는 메세지와 연관 관계
상태 다이어그램: 객체가 자신이 속한 클래스와 상태 변화, 다른 객체와 상호작용에 따른 변화 표기(탈출조건과 같은 것도 명시 가능)
- 행위적 다이어그램
유스케이스 다이어그램: 사용자 관점에서 시스템 활동 표현
시퀀스 다이어그램: 객체 간 상호작용을 메시지 흐름을 통해 시간적 순서를 알 수 있음

테스트
정적
동적
- 화이트박스: 모듈의 코드를 오픈한 상태에서 논리적인 모든 경로 테스트
-- 기초 경로 검사(Basis Path Testing): 모든 독립 실행 경로를 테스트
-- 제어 구조 검사
--- 조건 검사
--- 루프 검사
--- 데이터 흐름 검사

이런 검사를 할 때 어느 부분을 얼마나 잘 테스트했는지 평가 지표
- 구문 커버리지: 프로그램 모든 구문 한 번씩 실행될 수 있게 테스트 데이터 선정
- 결정 커버리지: 전체 결정문(조건문)을 테스트하는 방법
- 조건 커버리지: 조건문 내 참, 거짓을 적어도 한 번씩 결과가 나오도록 수행
- 조건/결정 커버리지: 전체 조건식과 개별 조건식도 참/거짓 한 번씩 나오게 모든 결과를 테스트
- 변경조건/결정 커버리지: 각 개별 조건식이 다른 개별 조건식의 영향 없이 독립적으로 영향을 주도록 테스트 케이스 수립
- 다중조건/결정 커버리지: 결정 포인트 내에 모든 개별식 조건 모든 조합 다 커버리지

- 블랙박스: 요구사항 명세서를 보면서 구현된 기능 작동해보며 테스트
-- 동등 분할(Equivalence Partitioning): 입력 데이터를 유사한 특성을 가진 그룹으로 나누고, 각 그룹에서 대표값 선택해 테스트
-- 경계 값 분석(Boundary Value Analysis): 입력 값의 경계 영역을 집중적으로 테스트. 경계 값 주변의 최소, 최대, 바로 앞, 바로 뒤 값을
-- 결정 테이블 테스트(Decision Table Testing): 어떤 조건에 따라서 출력의 조합을 표로 작성하는 것
-- 상태 전이 테스트(State Transition Testing): 어떤 이벤트에 의해서 다른 상태로 전이될 때 전이 과정을 테스트
-- 유스 케이스 테스트(Use Cast Testing): 사용자의 특정 행위(유스케이스)에 따른 시스템의 동작 테스트
-- 오류 추정(Error Guessing): 테스터의 경험과 직관을 바탕으로 발생할 수 있는 오류 추정하여 테스트
-- 