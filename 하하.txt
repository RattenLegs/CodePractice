표준 입출력

컴퓨터가 값을 입력받고 출력하는 기본적인 방법.
입력: 키보드 입력이 기본 소스, 사용자가 콘솔에서 입력한 값이 프로그램으로 전달
출력: 콘솔(터미널) 화면을 통해 출력하는 것이 기본적인 방법, 프로그램 실행 결과를 화면에 표시

C언어의 #include<stdio.h> = 표준 입출력의 약어(STanDard Input, Output)
printf, scanf를 사용할 수 있게끔 도와줌

프로그래밍 언어 환경을 설치하면 자동으로 내장되어 있는 함수 사용
입력받는 함수, 출력하는 함수가 있다

-입력
C: scanf, gets, fgets
Java: Scanner
Python: input

-출력
C: printf, puts
JAVA: System.out.print(), System.out.println()
Python: print

python은 숫자로 입력받던 문자로 입력받던 무조건 문자형태, 숫자로 바꿔야 함

-----------------------------

변수 선언과 출력

C, Java, Python 공통: 조건문, 반복문, 출력

변수 = 변하는 수
임의(값이 바뀔수 있다는 뜻=임시)로 값을 저장할 때 쓰는 공간

----------------------------------

조건문
조건문과 반복문만 배우면 이론적으로 모든 프로그램을 만들 수 있다

1) 참과 거짓을 어떻게 판단하는지
2) 논리 연산자가 무엇인지

정처기에서 가장 중요한 영역 3가지
조건문, 반복문, 출력(하지 않으면 답안 작성 불가)

조건문: 특정 조건에 따라서 프로그램의 흐름을 바꾸는 문구(=분기문)

"조건"이라는 것은 참 or 거짓을 가질 수 있는데, 둘 중 어떤 결과가 나왔는지에 따라서 다른 흐름으로 코드를 실행한다.


1단계: 단순한 비교연산자를 활용한 조건문 이해하기
2단계: 비교연산자는 무엇을 반환하는 연산자일까?(+예제)
3단계: 조건문에 무자(일반 문자or 0 or NULL)가 오는 경우 어떻게 해석?

조건문은 참, 거짓을 판단해서 코드의 흐름을 결정한다.
C언어에서는 1을 참으로, 0을 거짓으로 판단한다.(그 외 숫자는 참)
C언어에서는 문자가 들어간 경우 참, 빈 문자나 |0(NULL문자)는 거짓

Java에서는 조건문에 직접 0, 1을 못 넣습니다(에러).
Java에서는 true, false라는 값이 있습니다.(ex: 1>2는 false 리턴)

Python에서는 True, False라는 값이 있습니다. 0은 거짓, 1은 참으로 평가됩니다.

----------------------------------------------

반복문

코드 문제 중 '쉽게 나왔는데 디테일을 놓쳐서 틀리는 경우'가 많이 있음
디테일을 챙길 줄 알아야 함
디테일 크게 3가지
1) '어떤 조건일 때 코드가 동작하는가(조건)
2) C, Java, Python의 고유한 문법
3) 특정 코드를 몇 번이나 반복하는가?(반복문)
반복문 핵심 키워드인 for, while(+do while, break)을 학습해보자

앞으로 알려드릴 키워드(특히 실행순서) 디테일하게 공부해야 함

C언어 기준> 확장

for: 초기식과 조건식을 잘 봐야 한다.

while: 조건식과 break를 잘 봐야 한다.

do..while: 처음에 무조건 한 번 실행되는 부분을 봐야한다.

 for 반복문의 대략적인 형태
for(초기식; 조건식; 증감식){
//반복 실행할 코드
}

초기식: 반복문이 처음 시작할 때 단 한 번 실행됩니다.
조건식: 이 식이 참(true)인 동안에 반복문을 실행합니다.(반복실행할 코드들어감)
조건식이 거짓(false)이 되면 반복문이 종료됩니다.
증감식: 반복문이 한 번 시행될 때마다 조건식을 검사하기 전에 실행됩니다.
(실행순서: 1. 초기식 / 2. 조건식 / 3. 코드 실행 / 4. 증감식 / 5. 조건식 ..)

for
1. 초기식 실행: 반복문이 시작될 때 한 번 실행
2. 조건식 검사: 반복문 블록이 실행되기 전에 조건식 검사(true: 실행, false: 종료)
3. 반복문 블록 실행: true, 반복문 블록 내의 코드 실행
4. 증감식 실행: 3 이후에 증감식 실행
5. 조건식 검사: 4 이후에 다시 조건식 검사, true: 재실행, false: 종료

함수(메서드)의 선언과 호출

함수는 프로그래밍에서 특정 작업을 수행하기 위해 독립적으로 작성된 코드 블록입니다.
함수는 코드의 재사용성을 높이고, 가독성을 향상시키며, 유지보수를 쉽게 만듭니다.
함수는 입력값을 받아 작업을 수행하고 결과값을 반환할 수 있습니다.

1. 정의와 호출: 함수에게 이름을 지어주고, 기능을 불어넣어준다.
2. 입력값(파라미터): 함수에게 던져주는 값. 입력값이 없는 함수도 만들 수 있다.
3. 리턴값(돌려주는 값, 반환값): 함수가 기능을 모두 마치고 돌려주는 값. 언어에 따라서 돌려주는 값의 자료형을 명시하는 경우가 있다.
C언어에서 리턴값의 자료형은 함수명 앞에다 적는다. 

연산자와 기출문제

사칙연산: +, -, *, /, %

swich-case 문법: C와 Java가 같음
switch 문은 다중 선택 제어 구조
변수의 값을 평가하고, 그 값에 해당하는 case 블록을 실행하게 된다.
다양한 분기처리를 할 때 사용(여러 조건을 걸어서 그 조건을 실행)

위에 있는 것들이 모두가 아니면 default로 이동한다.

case 1을 실행하면 거기서부터 끝까지 내려감(break가 없는 경우)
default는 기본적으로 출력되는 값
but break를 만나면 빠져 나가기때문에 default까지 갈 일이 없음

C언어 자료형

정수형(Integer Types)
short: 작은 정수(%d, %hd)
int: 정수(%d)
long: 큰 정수(%ld)

문자형(Character Type)
char: 문자(%c)

실수형(Floating-Point Types)
float: 단정밀도 부동 소수점(%f)
double: 배정밀도 부동 소수점(%lf)

기타 자료형
void: 값을 반환하지 않는 함수의 반환 타입 또는 범용 포인터

C언어에서 문자열 할당하는 법

1. 문자열 배열
char str1[] = "Hello";

2. 포인터
char *str2 = "Hello";

3. 문자 배열
char str3[] = {'H', 'e', 'l', 'l', 'o', '|0'};

4. 문자열 배열 할당 후 개별 문자 할당
char str4[6];
str4[0] = 'H';
str4[1] = 'e';
....
str4[5] = '|0';

배열과 문자열
강사님은 C언어에서 배열, 포인터, 구조체를 가장 중시
배열은 문자열과 비슷한 속성이 있어서 하나의 챕터로 묶음


포인터의 개념과 활용

쉽지 않은 개념
C언어에서는 메모리를 직접 다룰 수 있는 형태로 되어있음
모든 프로그래밍언어에서 메모리 주소 출력, 메모리 가리킬 수 있음
but C언어가 직접적으로 메모리를 건드리는 가장 핵심적인 언어

변수 선언 복기
1. 변수가 정수형일때
int v = 42;
2. 변수가 문자열일때(여러 문자와 '|0')
char str[] = 'Hello!";
3. 변수가 배열일 때
int arr[] = {1,2,3,4,5};

C언어는 배열, 문자열, 포인터가 궁합이 좋다.

중간점검

1. *(별포)의 기능은 3가지
포인터 변수 탄생/주소의 값 가져오기/곱하기

2. 문자열은 그 자체로 메모리를 준다. 
char *s = &"hello, world" (X)
char *s = "hello, world" (O)

3. 문자열의 주소는 가장 앞 문자의 주소다. 
prinft("%c|n", *s)는 H라고 출력

4. 그 이야기는 
s[0], *s, *(s+0)
세 개의 출력값은 H로 동일하다는 뜻
배열도 포인터에 할당할 때 &를 붙이지 않지만, 포인터가 첫째 요소 메모리를 가리킨다.

배열 결론) 배열을 가리키고 있는 포인터의 값과 배열 첫번째 요소의 값은 같다.

포인터 전공자용

프로그램: 특정 언어로 메모리에 숫자를 넣는 과정
"RAM"이라 불리는 하드웨어도 캐패시터와 트랜지스터 덩어리

그래서 우리는 대략적으로 이런 격자에 값을 넣는 게임을 하고 있다.
하지만 우리는 이걸 숫자로 넣지 않고, 변수와 값이라는 개념으로 대입

왜 실행할때마다 주소가 바뀔까?
온라인: 서버에 할당
본인 컴퓨터: 운영체제가 할당

사람마다 운영체제가 다르고 메모리 크기도 다르다.
실행을 누르는 순간에서의 환경도 다르다.

>> 메모리 주소가 시험의 답으로 나올 수는 없다.

함수란?

함수: 중복을 줄이는것
함수는 특정 작업을 수행하는 코드 블록
코드의 재사용성을 높이고, 프로그램을 더 구조적으로 만들며, 유지보수를 쉽게 해 줍니다.
함수는 정의(선언)하는 부분이 있고 그 함수를 호출(사용)하는 곳이 있습니다.

메인함수도 함수다.
운영체제가 C언어로 만든 프로그램을 실행할 때, main 함수부터 찾아서 시작한다.
C언어의 조건문에서는 0을 거짓, 그 이외 모든 값을 참으로 한다.
다른 언어와 달리 C언어는 참일때 1(혹은 0 외의 값), 거짓일 때 0
 
1. 함수의 위치
2. 함수 호출 위히
3. 입력값
4. 리턴값

하나하나 꼼꼼히

입력값: 포인터 변수가 선언
*은 태어날 때, 어느 위치던 상관없음: *str, str* 상관없음

탄생할때 * > 포인터가 들어온다(주소가 와야함)
배열은 그 자체의 이름이 바로 주소로 쓰임
a[] = {1,2,3}
a 넣으면 a의 주소가 감(C언어 스펙이라 외워야 함)
int, char는 &라고 해서 특정 값의 주소를 전달해야 함

입력값은 어떻게 들어가는 것일까? int *, char *
변수의 경우 number 변수의 메모리 주소와 character 변수의 메모리 주소를 전달해준다.
직접 이 변수의 메모리 주소를 따서 줘야 함
포인터는 메모리주소를 주식으로 함

재귀함수: 자기 자신을 호출하는 함수

return 0: 정상적으로 함수 종료

함수의 리턴값을 힌트로 어떤 값이 나가는지 파악하자
호출, 입력값, 리턴값을 중요시해서 보자
메모리를 가리키는 포인터변수(*)가 입력값일 때는 주읳자
재귀함수는 그 다음 스텝을 적어가며 풀자

C언어에서 구조체(struct)는 여러 데이터를 하나의 단위로 묶어서 관리할 수 있게 해주는 사용자 정의 데이터타입입니다.
구조체를 사용하면 다양한 타입의 데이터를 하나로 묶어서 처리할 수 있습니다.

알아야 할 것
1. 각 변수에 어떻게 접근하는가
2. 포인터로는 어떻게 접근하는가
3. 구조체 자체가 배열에 들어가면?

구조체는 여러 타입을 하나로 묶는 "뭉텅이"를 정의
구조체 다음 변수명을 작성하면 조금 더 편해진다.
구조체가 선언된 이후 접근 시 .과 ->를 사용한다.

.은 구조체 자체의 값에 접근할 때
-> 은 구조체를 포인터로 가리켰을 때 접근하는 방법

아스키(ASCII)
영문 알파뱃을 사용하는 대표적인 문자 인코딩
대부분의 문자 인코딩이 아스키에 기초를 두고 있다.

아스키 코드 표 보는 법
DEC, Chr만 보면 됨

48, 65, 97

--------------------------------------------------------
goto, continue

goto문은 프로그램의 실행 흐름을 특정 레이블로 이동시키는 데 사용
레이블은 프로그램 내의 다른 위치에 정의된 이름으로, goto문은 이 이름을 참조하여 프로그램 실행을 그 지점으로 이동시킵니다.

goto문을 너무 많이 중첩해서 이곳 저곳 막 이동하는 코드를 작성했을 경우, 스파게티 코드라 말합니다.

continue: 바로 다음 반복 회차로 넘기는 키워드

goto가 있으면 레이블 위치 확인
coutinue는 단순히 다음 반복으로 넘어가는 것

-----------------------------------------------------
다차원 배열과 문자열 배열

이건 문제 보면서 더 익숙해져야 할듯

-----------------------------------------------------
-----------------------------------------------------
Java의 구조와 기초 용어
Java에서는 '객체' 단위로 해석
C는 위에서 아래로 흐르는데 Java는 여기저기 왔다갔다 함

extends 앞이 자식, 뒤가 부모
new+@를 받았는데 이거의 리턴값을 받는게 객체다 정도만 기억

코드흐름은 C언어처럼 메인함수에서 시작, 메인함수조차 어떤 클래스에 속해있음


클래스가 현실화되면 객체, 메서드는 클래스 안의 함수

교과서에서 정의하는 클래스
객체를 생성하기 위한 청사진 또는 템플릿입니다. 클래스는 클래스를 기반으로 생성될 객체의 구조와 동작을 정의합니다.
클래스는 데이터(속성)와 동작(메서드 또는 함수)을 하나의 단위로 캡슐화하여 해당 클래스의 여러 인스턴스(객체)를 생성할 수 있습니다.

클래스를 현실로 만들려면 객체를 만들어야 함
1. 클래스를 현실로 태어나게 해야 함
2. 태어날 때 값을 지정해줘야함(생성자)
3. 태어날 때 어떤 값을 주냐에 따라 다르게 태어남
ex) 이름만 주기, 가격만 주기 등
똑같은 생성자이지만 매개변수를 다르게 줄 수 있는 것을 오버로딩이라 부름
오버로드: 같은 이름인데 여러 개의 파라미터를 받을 수 있다는 개념
생성자는 클래스와 이름이 같은 함수, 생성자를 여러 값에 넣어서 한 번에 초기화 가능

클래스는 변수의 타입이다.
생성자는 클래스의 이름과 같아야 한다. Java는 생성자와 일반 함수를 이름으로 구별한다.

프로그래밍에서 객체(Object)는 객체 지향 프로그래밍(OOP)의 기본 개념입니다. 
객체는 실제 세계의 실체나 개념을 나타내며, 데이터(속성)와 동작(메서드 또는 함수)을 하나의 단위로 캡슐화합니다.
객체는 클래스로부터 생성되며, 클래스는 객체의 구조와 동작을 정의하는 청사진 또는 템플릿 역할을 합니다.

this: 내가 만든 현실 핸드백 그 자체, 매번 명시하기 싫으니까 씀!


직접 값을 설정하는 방법은 변수.멤버변수이다.
객체를 초기화할 때는 생성자를 쓴다.
this는 본인 객체를 가리키는 것
생성된 객체를 인스턴스라 부름

생성자: 클래스 내에서 클래스명과 같은 메서드
기본생성자: 파라미터가 없는 생성자, 적어도 되고 적지 않아도 생성된다.

클래스: 객체(인스턴스)가 탄생할 때 클래스명과 같은 함수명이 호출된다.

클래스 상속: 클래스를 만들 때 코드를 중복하여 사용하지 않도록 이전에 사용하던 클래스를 재활용하는 동시에 기능을 확장해서 더 많은 기능을 사용하는 클래스 생성

상속(Inheritance)은 객체 지향 프로그래밍의 중요한 개념 중 하나로 한 클래스가 다른 클래스의 속성과 메서드를 상속받아 사용하는 것을 의미합니다.
이를 통해 코드의 재사용성을 높이고, 객체 지향 설계의 계층 구조를 형성할 수 있습니다.
상속은 기존 클래스(부모 클래스 또는 상위 클래스)의 속성(필드)과 메서드를 새로운 클래스(자식 클래스 또는 하위 클래스)에서 물려받아 사용하는 기능입니다.
자식 클래스는 부모 클래스의 특성과 동작을 그대로 사용할 수 있으며, 필요에 따라 일부 속성이나 메서드를 재정의(오버라이딩)하거나 새로운 속성과 메서드를 추가할 수 있습니다.

--------------------------------------------------------------------
업캐스팅(Upcasting)은 객체 지향 프로그래밍에서 서브 클래스(자식 클래스)의 객체를 슈퍼 클래스(부모 클래스) 타입의 변수에 할당하는 것

--------------------------------------------------------------------------------
파이썬은 지금 바뀌기도 하고 사용례가 바뀌어서 문제 출제가 쉽지 않음
문제가 바뀌면 전원 정답처리를 할 수 있을 수도 있음

되게 단순하게 나오는 편

주요 부분만 숙지하고 문제 풀며 공부하는 것 추천

파이썬의 특징 중 하나: 
제작자가 이미 class를 만들어 둠 > 형태를 정해 둠
ex) 42라 쓰는 순간 숫자를 가져와서 객체 형성
a=42를 쓰는 순간 a는 int class를 받아온 객체가 되고 이 안에는 여러 메서드가 이미 지정되어있음
객체.메서드();

각 타입은 이미 어떤 특정 기능들을 가지고 태어나게 되어있음

파이썬은 변수에 값이 들어가면 타입이 정해진다.
해당 타입이 정해지자마자 사용할 수 있는 기능들이 있다.
int, float, bool, str, list
이것을 메서드라 하는데 각 타입별로 너무 많아서 하나씩 훑어보는 것이 좋다.
문자열 관련된 메서드는 더 많다. 외의 기능은 안 나올거 같지만 찾아보자(아마 교재 문제 중심)

파이썬에서 문자열 슬라이싱은 문자열의 특정 부분을 추출하는 기법입니다.
문자열은 인덱스를 사용하여 접근할 수 있으며, 슬라이싱은 콜론()을 사용하여 인덱스 범위를 지정합니다.

파이썬에서 문자열은 쉽게 만들어지기도 하지만 특정 방법으로 잘라낼 수 있다.
=======

파이썬 문자열
파이썬에서 문자열은 문자들의 집합으로 문자의 순서를 유지한 채로 저장되는 데이터 타입입니다.
문자열은 텍스트 데이터를 다루기 위한 기본적인 데이터 유형이며, 작은 따옴표(') 또는 큰 따옴표(")로 감싸서 표현할 수 있습니다.
파이썬에서는 두 가지 따옴표 방식이 서로 호환되어 사용할 수 있습니다.

C언어 문자열 배열 한번 더 보기

문자열을 출력할 때, 변수나 함수의 리턴값을 한번에 표기하고 싶다.
그래서 "문자열 템플릿", 특정한 틀에 맞춰 문자를 출력하는 법이 탄생

정처기에서는 일반 변수, 함수, 배열(파이썬은 리스트)가 잘 나온다.

파이썬에서 문자열은 단순히 하나의 요소일 뿐이다.
C언어와 달리 배열 크기를 이중으로 선언하지 않는다.

문자열 포맷팅으로 변수, 함수 값, 배열의 요소 등에 직접 접근할 수 있다.

파이썬의 for, while은 C나 Java와 약간은 다르다.
가장 많이 사용하는 list 형태의 반복문과 range 함수에 대해 알아보자.


내일까지 하나 부수기
