표준 입출력

컴퓨터가 값을 입력받고 출력하는 기본적인 방법.
입력: 키보드 입력이 기본 소스, 사용자가 콘솔에서 입력한 값이 프로그램으로 전달
출력: 콘솔(터미널) 화면을 통해 출력하는 것이 기본적인 방법, 프로그램 실행 결과를 화면에 표시

C언어의 #include<stdio.h> = 표준 입출력의 약어(STanDard Input, Output)
printf, scanf를 사용할 수 있게끔 도와줌

프로그래밍 언어 환경을 설치하면 자동으로 내장되어 있는 함수 사용
입력받는 함수, 출력하는 함수가 있다

-입력
C: scanf, gets, fgets
Java: Scanner
Python: input

-출력
C: printf, puts
JAVA: System.out.print(), System.out.println()
Python: print

python은 숫자로 입력받던 문자로 입력받던 무조건 문자형태, 숫자로 바꿔야 함

-----------------------------

변수 선언과 출력

C, Java, Python 공통: 조건문, 반복문, 출력

변수 = 변하는 수
임의(값이 바뀔수 있다는 뜻=임시)로 값을 저장할 때 쓰는 공간

----------------------------------

조건문
조건문과 반복문만 배우면 이론적으로 모든 프로그램을 만들 수 있다

1) 참과 거짓을 어떻게 판단하는지
2) 논리 연산자가 무엇인지

정처기에서 가장 중요한 영역 3가지
조건문, 반복문, 출력(하지 않으면 답안 작성 불가)

조건문: 특정 조건에 따라서 프로그램의 흐름을 바꾸는 문구(=분기문)

"조건"이라는 것은 참 or 거짓을 가질 수 있는데, 둘 중 어떤 결과가 나왔는지에 따라서 다른 흐름으로 코드를 실행한다.


1단계: 단순한 비교연산자를 활용한 조건문 이해하기
2단계: 비교연산자는 무엇을 반환하는 연산자일까?(+예제)
3단계: 조건문에 무자(일반 문자or 0 or NULL)가 오는 경우 어떻게 해석?

조건문은 참, 거짓을 판단해서 코드의 흐름을 결정한다.
C언어에서는 1을 참으로, 0을 거짓으로 판단한다.(그 외 숫자는 참)
C언어에서는 문자가 들어간 경우 참, 빈 문자나 |0(NULL문자)는 거짓

Java에서는 조건문에 직접 0, 1을 못 넣습니다(에러).
Java에서는 true, false라는 값이 있습니다.(ex: 1>2는 false 리턴)

Python에서는 True, False라는 값이 있습니다. 0은 거짓, 1은 참으로 평가됩니다.

----------------------------------------------

반복문

코드 문제 중 '쉽게 나왔는데 디테일을 놓쳐서 틀리는 경우'가 많이 있음
디테일을 챙길 줄 알아야 함
디테일 크게 3가지
1) '어떤 조건일 때 코드가 동작하는가(조건)
2) C, Java, Python의 고유한 문법
3) 특정 코드를 몇 번이나 반복하는가?(반복문)
반복문 핵심 키워드인 for, while(+do while, break)을 학습해보자

앞으로 알려드릴 키워드(특히 실행순서) 디테일하게 공부해야 함

C언어 기준> 확장

for: 초기식과 조건식을 잘 봐야 한다.

while: 조건식과 break를 잘 봐야 한다.

do..while: 처음에 무조건 한 번 실행되는 부분을 봐야한다.

 for 반복문의 대략적인 형태
for(초기식; 조건식; 증감식){
//반복 실행할 코드
}

초기식: 반복문이 처음 시작할 때 단 한 번 실행됩니다.
조건식: 이 식이 참(true)인 동안에 반복문을 실행합니다.(반복실행할 코드들어감)
조건식이 거짓(false)이 되면 반복문이 종료됩니다.
증감식: 반복문이 한 번 시행될 때마다 조건식을 검사하기 전에 실행됩니다.
(실행순서: 1. 초기식 / 2. 조건식 / 3. 코드 실행 / 4. 증감식 / 5. 조건식 ..)

for
1. 초기식 실행: 반복문이 시작될 때 한 번 실행
2. 조건식 검사: 반복문 블록이 실행되기 전에 조건식 검사(true: 실행, false: 종료)
3. 반복문 블록 실행: true, 반복문 블록 내의 코드 실행
4. 증감식 실행: 3 이후에 증감식 실행
5. 조건식 검사: 4 이후에 다시 조건식 검사, true: 재실행, false: 종료

함수(메서드)의 선언과 호출

함수는 프로그래밍에서 특정 작업을 수행하기 위해 독립적으로 작성된 코드 블록입니다.
함수는 코드의 재사용성을 높이고, 가독성을 향상시키며, 유지보수를 쉽게 만듭니다.
함수는 입력값을 받아 작업을 수행하고 결과값을 반환할 수 있습니다.

1. 정의와 호출: 함수에게 이름을 지어주고, 기능을 불어넣어준다.
2. 입력값(파라미터): 함수에게 던져주는 값. 입력값이 없는 함수도 만들 수 있다.
3. 리턴값(돌려주는 값, 반환값): 함수가 기능을 모두 마치고 돌려주는 값. 언어에 따라서 돌려주는 값의 자료형을 명시하는 경우가 있다.
C언어에서 리턴값의 자료형은 함수명 앞에다 적는다. 

연산자와 기출문제

사칙연산: +, -, *, /, %

swich-case 문법: C와 Java가 같음
switch 문은 다중 선택 제어 구조
변수의 값을 평가하고, 그 값에 해당하는 case 블록을 실행하게 된다.
다양한 분기처리를 할 때 사용(여러 조건을 걸어서 그 조건을 실행)

위에 있는 것들이 모두가 아니면 default로 이동한다.

case 1을 실행하면 거기서부터 끝까지 내려감(break가 없는 경우)
default는 기본적으로 출력되는 값
but break를 만나면 빠져 나가기때문에 default까지 갈 일이 없음

C언어 자료형

정수형(Integer Types)
short: 작은 정수(%d, %hd)
int: 정수(%d)
long: 큰 정수(%ld)

문자형(Character Type)
char: 문자(%c)

실수형(Floating-Point Types)
float: 단정밀도 부동 소수점(%f)
double: 배정밀도 부동 소수점(%lf)

기타 자료형
void: 값을 반환하지 않는 함수의 반환 타입 또는 범용 포인터

C언어에서 문자열 할당하는 법

1. 문자열 배열
char str1[] = "Hello";

2. 포인터
char *str2 = "Hello";

3. 문자 배열
char str3[] = {'H', 'e', 'l', 'l', 'o', '|0'};

4. 문자열 배열 할당 후 개별 문자 할당
char str4[6];
str4[0] = 'H';
str4[1] = 'e';
....
str4[5] = '|0';

배열과 문자열
강사님은 C언어에서 배열, 포인터, 구조체를 가장 중시
배열은 문자열과 비슷한 속성이 있어서 하나의 챕터로 묶음


포인터의 개념과 활용

쉽지 않은 개념
C언어에서는 메모리를 직접 다룰 수 있는 형태로 되어있음
모든 프로그래밍언어에서 메모리 주소 출력, 메모리 가리킬 수 있음
but C언어가 직접적으로 메모리를 건드리는 가장 핵심적인 언어

변수 선언 복기
1. 변수가 정수형일때
int v = 42;
2. 변수가 문자열일때(여러 문자와 '|0')
char str[] = 'Hello!";
3. 변수가 배열일 때
int arr[] = {1,2,3,4,5};

C언어는 배열, 문자열, 포인터가 궁합이 좋다.

중간점검

1. *(별포)의 기능은 3가지
포인터 변수 탄생/주소의 값 가져오기/곱하기

2. 문자열은 그 자체로 메모리를 준다. 
char *s = &"hello, world" (X)
char *s = "hello, world" (O)

3. 문자열의 주소는 가장 앞 문자의 주소다. 
prinft("%c|n", *s)는 H라고 출력

4. 그 이야기는 
s[0], *s, *(s+0)
세 개의 출력값은 H로 동일하다는 뜻
배열도 포인터에 할당할 때 &를 붙이지 않지만, 포인터가 첫째 요소 메모리를 가리킨다.

배열 결론) 배열을 가리키고 있는 포인터의 값과 배열 첫번째 요소의 값은 같다.

포인터 전공자용

프로그램: 특정 언어로 메모리에 숫자를 넣는 과정
"RAM"이라 불리는 하드웨어도 캐패시터와 트랜지스터 덩어리

그래서 우리는 대략적으로 이런 격자에 값을 넣는 게임을 하고 있다.
하지만 우리는 이걸 숫자로 넣지 않고, 변수와 값이라는 개념으로 대입

왜 실행할때마다 주소가 바뀔까?
온라인: 서버에 할당
본인 컴퓨터: 운영체제가 할당

사람마다 운영체제가 다르고 메모리 크기도 다르다.
실행을 누르는 순간에서의 환경도 다르다.

>> 메모리 주소가 시험의 답으로 나올 수는 없다.

함수란?

함수: 중복을 줄이는것
함수는 특정 작업을 수행하는 코드 블록
코드의 재사용성을 높이고, 프로그램을 더 구조적으로 만들며, 유지보수를 쉽게 해 줍니다.
함수는 정의(선언)하는 부분이 있고 그 함수를 호출(사용)하는 곳이 있습니다.

메인함수도 함수다.
운영체제가 C언어로 만든 프로그램을 실행할 때, main 함수부터 찾아서 시작한다.
C언어의 조건문에서는 0을 거짓, 그 이외 모든 값을 참으로 한다.
다른 언어와 달리 C언어는 참일때 1(혹은 0 외의 값), 거짓일 때 0
 
1. 함수의 위치
2. 함수 호출 위히
3. 입력값
4. 리턴값

하나하나 꼼꼼히

입력값: 포인터 변수가 선언
*은 태어날 때, 어느 위치던 상관없음: *str, str* 상관없음

탄생할때 * > 포인터가 들어온다(주소가 와야함)
배열은 그 자체의 이름이 바로 주소로 쓰임
a[] = {1,2,3}
a 넣으면 a의 주소가 감(C언어 스펙이라 외워야 함)
int, char는 &라고 해서 특정 값의 주소를 전달해야 함

입력값은 어떻게 들어가는 것일까? int *, char *
변수의 경우 number 변수의 메모리 주소와 character 변수의 메모리 주소를 전달해준다.
직접 이 변수의 메모리 주소를 따서 줘야 함
포인터는 메모리주소를 주식으로 함

재귀함수: 자기 자신을 호출하는 함수

return 0: 정상적으로 함수 종료

